/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 495.0, "series": [{"data": [[0.0, 4.0], [0.1, 7.0], [0.2, 7.0], [0.3, 7.0], [0.4, 8.0], [0.5, 8.0], [0.6, 8.0], [0.7, 8.0], [0.8, 9.0], [0.9, 9.0], [1.0, 9.0], [1.1, 9.0], [1.2, 9.0], [1.3, 9.0], [1.4, 10.0], [1.5, 10.0], [1.6, 10.0], [1.7, 10.0], [1.8, 10.0], [1.9, 10.0], [2.0, 10.0], [2.1, 11.0], [2.2, 11.0], [2.3, 11.0], [2.4, 11.0], [2.5, 11.0], [2.6, 11.0], [2.7, 11.0], [2.8, 11.0], [2.9, 12.0], [3.0, 12.0], [3.1, 12.0], [3.2, 12.0], [3.3, 12.0], [3.4, 12.0], [3.5, 12.0], [3.6, 13.0], [3.7, 13.0], [3.8, 13.0], [3.9, 13.0], [4.0, 13.0], [4.1, 13.0], [4.2, 13.0], [4.3, 13.0], [4.4, 14.0], [4.5, 14.0], [4.6, 14.0], [4.7, 14.0], [4.8, 14.0], [4.9, 14.0], [5.0, 14.0], [5.1, 14.0], [5.2, 15.0], [5.3, 15.0], [5.4, 15.0], [5.5, 15.0], [5.6, 15.0], [5.7, 15.0], [5.8, 15.0], [5.9, 16.0], [6.0, 16.0], [6.1, 16.0], [6.2, 16.0], [6.3, 16.0], [6.4, 16.0], [6.5, 16.0], [6.6, 17.0], [6.7, 17.0], [6.8, 17.0], [6.9, 17.0], [7.0, 17.0], [7.1, 18.0], [7.2, 18.0], [7.3, 18.0], [7.4, 18.0], [7.5, 18.0], [7.6, 19.0], [7.7, 19.0], [7.8, 19.0], [7.9, 19.0], [8.0, 19.0], [8.1, 20.0], [8.2, 20.0], [8.3, 20.0], [8.4, 20.0], [8.5, 21.0], [8.6, 21.0], [8.7, 21.0], [8.8, 22.0], [8.9, 22.0], [9.0, 22.0], [9.1, 22.0], [9.2, 23.0], [9.3, 23.0], [9.4, 23.0], [9.5, 23.0], [9.6, 23.0], [9.7, 24.0], [9.8, 24.0], [9.9, 25.0], [10.0, 25.0], [10.1, 25.0], [10.2, 26.0], [10.3, 26.0], [10.4, 26.0], [10.5, 26.0], [10.6, 27.0], [10.7, 27.0], [10.8, 27.0], [10.9, 28.0], [11.0, 28.0], [11.1, 28.0], [11.2, 28.0], [11.3, 29.0], [11.4, 29.0], [11.5, 29.0], [11.6, 30.0], [11.7, 30.0], [11.8, 30.0], [11.9, 30.0], [12.0, 31.0], [12.1, 31.0], [12.2, 31.0], [12.3, 31.0], [12.4, 32.0], [12.5, 32.0], [12.6, 32.0], [12.7, 32.0], [12.8, 32.0], [12.9, 33.0], [13.0, 33.0], [13.1, 33.0], [13.2, 33.0], [13.3, 34.0], [13.4, 34.0], [13.5, 34.0], [13.6, 34.0], [13.7, 35.0], [13.8, 35.0], [13.9, 35.0], [14.0, 35.0], [14.1, 36.0], [14.2, 36.0], [14.3, 36.0], [14.4, 37.0], [14.5, 37.0], [14.6, 37.0], [14.7, 38.0], [14.8, 38.0], [14.9, 38.0], [15.0, 39.0], [15.1, 39.0], [15.2, 40.0], [15.3, 40.0], [15.4, 40.0], [15.5, 41.0], [15.6, 41.0], [15.7, 42.0], [15.8, 42.0], [15.9, 43.0], [16.0, 43.0], [16.1, 44.0], [16.2, 44.0], [16.3, 44.0], [16.4, 45.0], [16.5, 45.0], [16.6, 46.0], [16.7, 46.0], [16.8, 47.0], [16.9, 47.0], [17.0, 47.0], [17.1, 47.0], [17.2, 48.0], [17.3, 49.0], [17.4, 49.0], [17.5, 49.0], [17.6, 50.0], [17.7, 50.0], [17.8, 50.0], [17.9, 51.0], [18.0, 51.0], [18.1, 51.0], [18.2, 52.0], [18.3, 52.0], [18.4, 52.0], [18.5, 53.0], [18.6, 53.0], [18.7, 53.0], [18.8, 53.0], [18.9, 54.0], [19.0, 54.0], [19.1, 54.0], [19.2, 55.0], [19.3, 55.0], [19.4, 55.0], [19.5, 55.0], [19.6, 56.0], [19.7, 56.0], [19.8, 56.0], [19.9, 57.0], [20.0, 57.0], [20.1, 58.0], [20.2, 58.0], [20.3, 58.0], [20.4, 59.0], [20.5, 59.0], [20.6, 59.0], [20.7, 60.0], [20.8, 60.0], [20.9, 60.0], [21.0, 61.0], [21.1, 61.0], [21.2, 61.0], [21.3, 61.0], [21.4, 62.0], [21.5, 62.0], [21.6, 63.0], [21.7, 63.0], [21.8, 64.0], [21.9, 64.0], [22.0, 64.0], [22.1, 65.0], [22.2, 65.0], [22.3, 65.0], [22.4, 66.0], [22.5, 66.0], [22.6, 67.0], [22.7, 67.0], [22.8, 67.0], [22.9, 68.0], [23.0, 68.0], [23.1, 69.0], [23.2, 69.0], [23.3, 70.0], [23.4, 70.0], [23.5, 71.0], [23.6, 71.0], [23.7, 71.0], [23.8, 72.0], [23.9, 72.0], [24.0, 72.0], [24.1, 73.0], [24.2, 73.0], [24.3, 74.0], [24.4, 74.0], [24.5, 74.0], [24.6, 75.0], [24.7, 75.0], [24.8, 76.0], [24.9, 76.0], [25.0, 77.0], [25.1, 77.0], [25.2, 77.0], [25.3, 78.0], [25.4, 78.0], [25.5, 78.0], [25.6, 78.0], [25.7, 79.0], [25.8, 79.0], [25.9, 79.0], [26.0, 80.0], [26.1, 80.0], [26.2, 80.0], [26.3, 80.0], [26.4, 80.0], [26.5, 81.0], [26.6, 81.0], [26.7, 81.0], [26.8, 81.0], [26.9, 81.0], [27.0, 81.0], [27.1, 82.0], [27.2, 82.0], [27.3, 82.0], [27.4, 82.0], [27.5, 82.0], [27.6, 83.0], [27.7, 83.0], [27.8, 83.0], [27.9, 83.0], [28.0, 83.0], [28.1, 83.0], [28.2, 84.0], [28.3, 84.0], [28.4, 84.0], [28.5, 84.0], [28.6, 84.0], [28.7, 84.0], [28.8, 84.0], [28.9, 84.0], [29.0, 85.0], [29.1, 85.0], [29.2, 85.0], [29.3, 85.0], [29.4, 85.0], [29.5, 85.0], [29.6, 85.0], [29.7, 85.0], [29.8, 86.0], [29.9, 86.0], [30.0, 86.0], [30.1, 86.0], [30.2, 86.0], [30.3, 86.0], [30.4, 86.0], [30.5, 86.0], [30.6, 87.0], [30.7, 87.0], [30.8, 87.0], [30.9, 87.0], [31.0, 87.0], [31.1, 87.0], [31.2, 87.0], [31.3, 87.0], [31.4, 88.0], [31.5, 88.0], [31.6, 88.0], [31.7, 88.0], [31.8, 88.0], [31.9, 88.0], [32.0, 88.0], [32.1, 88.0], [32.2, 88.0], [32.3, 88.0], [32.4, 89.0], [32.5, 89.0], [32.6, 89.0], [32.7, 89.0], [32.8, 89.0], [32.9, 89.0], [33.0, 89.0], [33.1, 89.0], [33.2, 90.0], [33.3, 90.0], [33.4, 90.0], [33.5, 90.0], [33.6, 90.0], [33.7, 90.0], [33.8, 90.0], [33.9, 90.0], [34.0, 90.0], [34.1, 91.0], [34.2, 91.0], [34.3, 91.0], [34.4, 91.0], [34.5, 91.0], [34.6, 91.0], [34.7, 91.0], [34.8, 91.0], [34.9, 91.0], [35.0, 92.0], [35.1, 92.0], [35.2, 92.0], [35.3, 92.0], [35.4, 92.0], [35.5, 92.0], [35.6, 92.0], [35.7, 92.0], [35.8, 92.0], [35.9, 92.0], [36.0, 92.0], [36.1, 92.0], [36.2, 92.0], [36.3, 93.0], [36.4, 93.0], [36.5, 93.0], [36.6, 93.0], [36.7, 93.0], [36.8, 93.0], [36.9, 93.0], [37.0, 93.0], [37.1, 93.0], [37.2, 93.0], [37.3, 93.0], [37.4, 93.0], [37.5, 93.0], [37.6, 94.0], [37.7, 94.0], [37.8, 94.0], [37.9, 94.0], [38.0, 94.0], [38.1, 94.0], [38.2, 94.0], [38.3, 94.0], [38.4, 94.0], [38.5, 94.0], [38.6, 94.0], [38.7, 94.0], [38.8, 95.0], [38.9, 95.0], [39.0, 95.0], [39.1, 95.0], [39.2, 95.0], [39.3, 95.0], [39.4, 95.0], [39.5, 95.0], [39.6, 95.0], [39.7, 95.0], [39.8, 95.0], [39.9, 95.0], [40.0, 96.0], [40.1, 96.0], [40.2, 96.0], [40.3, 96.0], [40.4, 96.0], [40.5, 96.0], [40.6, 96.0], [40.7, 96.0], [40.8, 96.0], [40.9, 96.0], [41.0, 96.0], [41.1, 97.0], [41.2, 97.0], [41.3, 97.0], [41.4, 97.0], [41.5, 97.0], [41.6, 97.0], [41.7, 97.0], [41.8, 97.0], [41.9, 97.0], [42.0, 97.0], [42.1, 98.0], [42.2, 98.0], [42.3, 98.0], [42.4, 98.0], [42.5, 98.0], [42.6, 98.0], [42.7, 98.0], [42.8, 98.0], [42.9, 98.0], [43.0, 98.0], [43.1, 99.0], [43.2, 99.0], [43.3, 99.0], [43.4, 99.0], [43.5, 99.0], [43.6, 99.0], [43.7, 99.0], [43.8, 99.0], [43.9, 99.0], [44.0, 99.0], [44.1, 100.0], [44.2, 100.0], [44.3, 100.0], [44.4, 100.0], [44.5, 100.0], [44.6, 100.0], [44.7, 100.0], [44.8, 100.0], [44.9, 100.0], [45.0, 100.0], [45.1, 101.0], [45.2, 101.0], [45.3, 101.0], [45.4, 101.0], [45.5, 101.0], [45.6, 101.0], [45.7, 101.0], [45.8, 101.0], [45.9, 101.0], [46.0, 101.0], [46.1, 102.0], [46.2, 102.0], [46.3, 102.0], [46.4, 102.0], [46.5, 102.0], [46.6, 102.0], [46.7, 102.0], [46.8, 102.0], [46.9, 102.0], [47.0, 102.0], [47.1, 102.0], [47.2, 103.0], [47.3, 103.0], [47.4, 103.0], [47.5, 103.0], [47.6, 103.0], [47.7, 103.0], [47.8, 103.0], [47.9, 103.0], [48.0, 103.0], [48.1, 103.0], [48.2, 103.0], [48.3, 104.0], [48.4, 104.0], [48.5, 104.0], [48.6, 104.0], [48.7, 104.0], [48.8, 104.0], [48.9, 104.0], [49.0, 104.0], [49.1, 104.0], [49.2, 105.0], [49.3, 105.0], [49.4, 105.0], [49.5, 105.0], [49.6, 105.0], [49.7, 105.0], [49.8, 105.0], [49.9, 105.0], [50.0, 105.0], [50.1, 105.0], [50.2, 105.0], [50.3, 106.0], [50.4, 106.0], [50.5, 106.0], [50.6, 106.0], [50.7, 106.0], [50.8, 106.0], [50.9, 106.0], [51.0, 107.0], [51.1, 107.0], [51.2, 107.0], [51.3, 107.0], [51.4, 107.0], [51.5, 108.0], [51.6, 108.0], [51.7, 108.0], [51.8, 108.0], [51.9, 108.0], [52.0, 108.0], [52.1, 108.0], [52.2, 108.0], [52.3, 109.0], [52.4, 109.0], [52.5, 109.0], [52.6, 109.0], [52.7, 109.0], [52.8, 109.0], [52.9, 109.0], [53.0, 110.0], [53.1, 110.0], [53.2, 110.0], [53.3, 110.0], [53.4, 110.0], [53.5, 110.0], [53.6, 110.0], [53.7, 111.0], [53.8, 111.0], [53.9, 111.0], [54.0, 111.0], [54.1, 111.0], [54.2, 111.0], [54.3, 111.0], [54.4, 111.0], [54.5, 112.0], [54.6, 112.0], [54.7, 112.0], [54.8, 112.0], [54.9, 112.0], [55.0, 113.0], [55.1, 113.0], [55.2, 113.0], [55.3, 113.0], [55.4, 113.0], [55.5, 113.0], [55.6, 113.0], [55.7, 113.0], [55.8, 113.0], [55.9, 114.0], [56.0, 114.0], [56.1, 114.0], [56.2, 114.0], [56.3, 114.0], [56.4, 114.0], [56.5, 114.0], [56.6, 114.0], [56.7, 114.0], [56.8, 114.0], [56.9, 115.0], [57.0, 115.0], [57.1, 115.0], [57.2, 115.0], [57.3, 115.0], [57.4, 115.0], [57.5, 115.0], [57.6, 115.0], [57.7, 115.0], [57.8, 116.0], [57.9, 116.0], [58.0, 116.0], [58.1, 116.0], [58.2, 116.0], [58.3, 116.0], [58.4, 116.0], [58.5, 116.0], [58.6, 116.0], [58.7, 117.0], [58.8, 117.0], [58.9, 117.0], [59.0, 117.0], [59.1, 117.0], [59.2, 117.0], [59.3, 117.0], [59.4, 117.0], [59.5, 117.0], [59.6, 117.0], [59.7, 117.0], [59.8, 117.0], [59.9, 117.0], [60.0, 117.0], [60.1, 118.0], [60.2, 118.0], [60.3, 118.0], [60.4, 118.0], [60.5, 118.0], [60.6, 118.0], [60.7, 118.0], [60.8, 118.0], [60.9, 118.0], [61.0, 118.0], [61.1, 118.0], [61.2, 118.0], [61.3, 119.0], [61.4, 119.0], [61.5, 119.0], [61.6, 119.0], [61.7, 119.0], [61.8, 119.0], [61.9, 119.0], [62.0, 119.0], [62.1, 119.0], [62.2, 119.0], [62.3, 119.0], [62.4, 120.0], [62.5, 120.0], [62.6, 120.0], [62.7, 120.0], [62.8, 120.0], [62.9, 120.0], [63.0, 120.0], [63.1, 120.0], [63.2, 120.0], [63.3, 120.0], [63.4, 120.0], [63.5, 121.0], [63.6, 121.0], [63.7, 121.0], [63.8, 121.0], [63.9, 121.0], [64.0, 121.0], [64.1, 121.0], [64.2, 121.0], [64.3, 121.0], [64.4, 121.0], [64.5, 121.0], [64.6, 121.0], [64.7, 121.0], [64.8, 122.0], [64.9, 122.0], [65.0, 122.0], [65.1, 122.0], [65.2, 122.0], [65.3, 122.0], [65.4, 122.0], [65.5, 122.0], [65.6, 122.0], [65.7, 122.0], [65.8, 122.0], [65.9, 122.0], [66.0, 122.0], [66.1, 122.0], [66.2, 123.0], [66.3, 123.0], [66.4, 123.0], [66.5, 123.0], [66.6, 123.0], [66.7, 123.0], [66.8, 123.0], [66.9, 123.0], [67.0, 123.0], [67.1, 123.0], [67.2, 123.0], [67.3, 123.0], [67.4, 123.0], [67.5, 123.0], [67.6, 123.0], [67.7, 123.0], [67.8, 124.0], [67.9, 124.0], [68.0, 124.0], [68.1, 124.0], [68.2, 124.0], [68.3, 124.0], [68.4, 124.0], [68.5, 124.0], [68.6, 124.0], [68.7, 124.0], [68.8, 124.0], [68.9, 124.0], [69.0, 124.0], [69.1, 125.0], [69.2, 125.0], [69.3, 125.0], [69.4, 125.0], [69.5, 125.0], [69.6, 125.0], [69.7, 125.0], [69.8, 125.0], [69.9, 125.0], [70.0, 125.0], [70.1, 125.0], [70.2, 125.0], [70.3, 125.0], [70.4, 126.0], [70.5, 126.0], [70.6, 126.0], [70.7, 126.0], [70.8, 126.0], [70.9, 126.0], [71.0, 126.0], [71.1, 126.0], [71.2, 126.0], [71.3, 126.0], [71.4, 126.0], [71.5, 126.0], [71.6, 126.0], [71.7, 127.0], [71.8, 127.0], [71.9, 127.0], [72.0, 127.0], [72.1, 127.0], [72.2, 127.0], [72.3, 127.0], [72.4, 127.0], [72.5, 127.0], [72.6, 128.0], [72.7, 128.0], [72.8, 128.0], [72.9, 128.0], [73.0, 128.0], [73.1, 128.0], [73.2, 128.0], [73.3, 128.0], [73.4, 128.0], [73.5, 128.0], [73.6, 129.0], [73.7, 129.0], [73.8, 129.0], [73.9, 129.0], [74.0, 129.0], [74.1, 129.0], [74.2, 129.0], [74.3, 129.0], [74.4, 129.0], [74.5, 129.0], [74.6, 129.0], [74.7, 129.0], [74.8, 130.0], [74.9, 130.0], [75.0, 130.0], [75.1, 130.0], [75.2, 130.0], [75.3, 130.0], [75.4, 130.0], [75.5, 130.0], [75.6, 130.0], [75.7, 130.0], [75.8, 130.0], [75.9, 130.0], [76.0, 130.0], [76.1, 131.0], [76.2, 131.0], [76.3, 131.0], [76.4, 131.0], [76.5, 131.0], [76.6, 131.0], [76.7, 131.0], [76.8, 131.0], [76.9, 131.0], [77.0, 131.0], [77.1, 132.0], [77.2, 132.0], [77.3, 132.0], [77.4, 132.0], [77.5, 132.0], [77.6, 132.0], [77.7, 132.0], [77.8, 132.0], [77.9, 132.0], [78.0, 132.0], [78.1, 133.0], [78.2, 133.0], [78.3, 133.0], [78.4, 133.0], [78.5, 133.0], [78.6, 133.0], [78.7, 133.0], [78.8, 133.0], [78.9, 133.0], [79.0, 133.0], [79.1, 133.0], [79.2, 133.0], [79.3, 134.0], [79.4, 134.0], [79.5, 134.0], [79.6, 134.0], [79.7, 134.0], [79.8, 134.0], [79.9, 134.0], [80.0, 134.0], [80.1, 134.0], [80.2, 134.0], [80.3, 135.0], [80.4, 135.0], [80.5, 135.0], [80.6, 135.0], [80.7, 135.0], [80.8, 135.0], [80.9, 135.0], [81.0, 135.0], [81.1, 136.0], [81.2, 136.0], [81.3, 136.0], [81.4, 136.0], [81.5, 136.0], [81.6, 136.0], [81.7, 136.0], [81.8, 136.0], [81.9, 136.0], [82.0, 137.0], [82.1, 137.0], [82.2, 137.0], [82.3, 137.0], [82.4, 137.0], [82.5, 137.0], [82.6, 137.0], [82.7, 137.0], [82.8, 138.0], [82.9, 138.0], [83.0, 138.0], [83.1, 138.0], [83.2, 138.0], [83.3, 138.0], [83.4, 139.0], [83.5, 139.0], [83.6, 139.0], [83.7, 139.0], [83.8, 139.0], [83.9, 139.0], [84.0, 140.0], [84.1, 140.0], [84.2, 140.0], [84.3, 140.0], [84.4, 140.0], [84.5, 141.0], [84.6, 141.0], [84.7, 141.0], [84.8, 141.0], [84.9, 142.0], [85.0, 142.0], [85.1, 142.0], [85.2, 142.0], [85.3, 142.0], [85.4, 143.0], [85.5, 143.0], [85.6, 143.0], [85.7, 143.0], [85.8, 144.0], [85.9, 144.0], [86.0, 144.0], [86.1, 144.0], [86.2, 145.0], [86.3, 145.0], [86.4, 145.0], [86.5, 145.0], [86.6, 145.0], [86.7, 146.0], [86.8, 146.0], [86.9, 146.0], [87.0, 146.0], [87.1, 147.0], [87.2, 147.0], [87.3, 147.0], [87.4, 148.0], [87.5, 148.0], [87.6, 148.0], [87.7, 148.0], [87.8, 149.0], [87.9, 149.0], [88.0, 149.0], [88.1, 149.0], [88.2, 150.0], [88.3, 150.0], [88.4, 150.0], [88.5, 151.0], [88.6, 151.0], [88.7, 151.0], [88.8, 152.0], [88.9, 152.0], [89.0, 152.0], [89.1, 153.0], [89.2, 153.0], [89.3, 153.0], [89.4, 153.0], [89.5, 154.0], [89.6, 154.0], [89.7, 154.0], [89.8, 155.0], [89.9, 155.0], [90.0, 155.0], [90.1, 156.0], [90.2, 156.0], [90.3, 157.0], [90.4, 157.0], [90.5, 157.0], [90.6, 158.0], [90.7, 158.0], [90.8, 158.0], [90.9, 159.0], [91.0, 159.0], [91.1, 159.0], [91.2, 160.0], [91.3, 160.0], [91.4, 161.0], [91.5, 161.0], [91.6, 162.0], [91.7, 162.0], [91.8, 163.0], [91.9, 164.0], [92.0, 164.0], [92.1, 165.0], [92.2, 165.0], [92.3, 166.0], [92.4, 166.0], [92.5, 167.0], [92.6, 168.0], [92.7, 169.0], [92.8, 169.0], [92.9, 170.0], [93.0, 171.0], [93.1, 171.0], [93.2, 172.0], [93.3, 173.0], [93.4, 174.0], [93.5, 175.0], [93.6, 176.0], [93.7, 177.0], [93.8, 178.0], [93.9, 179.0], [94.0, 180.0], [94.1, 181.0], [94.2, 182.0], [94.3, 183.0], [94.4, 183.0], [94.5, 184.0], [94.6, 185.0], [94.7, 186.0], [94.8, 187.0], [94.9, 187.0], [95.0, 188.0], [95.1, 189.0], [95.2, 190.0], [95.3, 191.0], [95.4, 192.0], [95.5, 194.0], [95.6, 195.0], [95.7, 197.0], [95.8, 198.0], [95.9, 199.0], [96.0, 201.0], [96.1, 202.0], [96.2, 203.0], [96.3, 204.0], [96.4, 206.0], [96.5, 209.0], [96.6, 213.0], [96.7, 215.0], [96.8, 217.0], [96.9, 219.0], [97.0, 220.0], [97.1, 223.0], [97.2, 225.0], [97.3, 228.0], [97.4, 229.0], [97.5, 231.0], [97.6, 233.0], [97.7, 234.0], [97.8, 235.0], [97.9, 237.0], [98.0, 240.0], [98.1, 241.0], [98.2, 243.0], [98.3, 246.0], [98.4, 251.0], [98.5, 261.0], [98.6, 265.0], [98.7, 270.0], [98.8, 275.0], [98.9, 277.0], [99.0, 279.0], [99.1, 283.0], [99.2, 285.0], [99.3, 294.0], [99.4, 305.0], [99.5, 310.0], [99.6, 317.0], [99.7, 332.0], [99.8, 336.0], [99.9, 345.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 28.0, "minX": 0.0, "maxY": 152408.0, "series": [{"data": [[0.0, 129480.0], [300.0, 1921.0], [100.0, 152408.0], [200.0, 10018.0], [400.0, 28.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 293855.0, "minX": 3.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 293855.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 293855.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 975.6688351619832, "minX": 1.71924162E12, "maxY": 1186.0726450866568, "series": [{"data": [[1.71924162E12, 975.6688351619832], [1.71924168E12, 1186.0726450866568]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71924168E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6.0, "minX": 15.0, "maxY": 224.86885245901638, "series": [{"data": [[15.0, 54.46153846153845], [16.0, 6.640000000000001], [17.0, 6.521739130434781], [18.0, 8.823529411764707], [19.0, 7.05], [20.0, 7.2105263157894735], [21.0, 7.449999999999999], [22.0, 6.285714285714286], [23.0, 7.181818181818182], [24.0, 8.160000000000002], [25.0, 9.333333333333334], [26.0, 6.0], [27.0, 9.72], [28.0, 9.823529411764707], [29.0, 7.25], [30.0, 7.571428571428571], [31.0, 8.793103448275861], [32.0, 7.5], [33.0, 8.500000000000002], [34.0, 12.192307692307693], [35.0, 23.444444444444443], [36.0, 23.333333333333332], [37.0, 12.999999999999996], [38.0, 8.162162162162165], [39.0, 10.75], [40.0, 8.94736842105263], [41.0, 8.769230769230766], [42.0, 8.28205128205128], [43.0, 9.511111111111113], [44.0, 8.863636363636363], [45.0, 8.624999999999998], [46.0, 7.583333333333334], [47.0, 6.0], [48.0, 8.239130434782613], [49.0, 10.382978723404253], [50.0, 7.0], [51.0, 15.574074074074076], [52.0, 15.2962962962963], [53.0, 11.480769230769228], [54.0, 10.180000000000003], [55.0, 10.030303030303031], [56.0, 9.315789473684212], [57.0, 9.76190476190476], [58.0, 9.195121951219516], [59.0, 9.694915254237289], [60.0, 6.91304347826087], [61.0, 9.207547169811319], [62.0, 10.672131147540984], [63.0, 9.623188405797102], [64.0, 8.22857142857143], [65.0, 13.82758620689655], [66.0, 10.195876288659795], [67.0, 7.813953488372094], [68.0, 8.591549295774648], [69.0, 8.485714285714286], [70.0, 8.923076923076927], [71.0, 9.306122448979593], [72.0, 9.32394366197183], [73.0, 9.244897959183675], [74.0, 11.52], [75.0, 10.410958904109592], [76.0, 8.779999999999998], [77.0, 7.818181818181819], [78.0, 11.183333333333337], [79.0, 9.708333333333332], [80.0, 10.611111111111109], [81.0, 9.698795180722888], [82.0, 8.779220779220779], [83.0, 14.720930232558139], [84.0, 20.366197183098596], [85.0, 20.155555555555555], [86.0, 15.919999999999996], [87.0, 12.424657534246577], [88.0, 9.790697674418604], [89.0, 10.0], [91.0, 22.873563218390796], [92.0, 12.512195121951219], [93.0, 13.672413793103443], [95.0, 29.017543859649113], [94.0, 89.0], [96.0, 53.78378378378377], [97.0, 9.818181818181822], [98.0, 15.360465116279066], [99.0, 9.1958762886598], [100.0, 11.955882352941172], [101.0, 9.64814814814815], [102.0, 12.166666666666659], [103.0, 8.285714285714286], [104.0, 26.446601941747566], [105.0, 20.36082474226804], [106.0, 17.953488372093027], [107.0, 11.158878504672902], [108.0, 9.197916666666668], [109.0, 12.909090909090908], [110.0, 11.098765432098768], [111.0, 10.171641791044777], [112.0, 12.799999999999999], [113.0, 14.159574468085108], [114.0, 16.96052631578948], [115.0, 22.824999999999996], [116.0, 36.25], [117.0, 19.064516129032253], [118.0, 14.308411214953273], [119.0, 11.49107142857143], [120.0, 12.878787878787879], [121.0, 12.823529411764712], [122.0, 10.857142857142854], [123.0, 8.0], [124.0, 14.570247933884296], [125.0, 13.944444444444445], [126.0, 15.400000000000002], [127.0, 11.0], [128.0, 10.899999999999997], [129.0, 11.034782608695648], [130.0, 13.411764705882351], [131.0, 10.749999999999993], [132.0, 15.03448275862069], [133.0, 10.68918918918919], [134.0, 11.844036697247711], [135.0, 11.21333333333333], [136.0, 11.944444444444445], [137.0, 10.333333333333336], [138.0, 16.79220779220779], [139.0, 16.456521739130444], [140.0, 10.569444444444443], [141.0, 13.53571428571429], [142.0, 12.150537634408602], [143.0, 14.139130434782608], [144.0, 18.043478260869566], [145.0, 12.175182481751824], [146.0, 9.533678756476684], [147.0, 11.192660550458715], [148.0, 11.338461538461537], [149.0, 11.261261261261259], [150.0, 10.381818181818184], [151.0, 11.682352941176468], [152.0, 12.964028776978422], [153.0, 11.214876033057848], [154.0, 10.510638297872337], [155.0, 11.901960784313722], [156.0, 11.272222222222226], [157.0, 10.793103448275863], [158.0, 11.910256410256412], [159.0, 11.659340659340662], [160.0, 15.418367346938776], [161.0, 11.213414634146337], [162.0, 11.589041095890412], [163.0, 13.3963963963964], [164.0, 13.80952380952381], [165.0, 13.340659340659347], [166.0, 11.353658536585364], [167.0, 10.867088607594935], [168.0, 10.194444444444443], [169.0, 11.479768786127163], [170.0, 10.828947368421051], [171.0, 11.190184049079756], [172.0, 12.438095238095238], [173.0, 14.377358490566035], [174.0, 23.30379746835444], [175.0, 18.37634408602151], [176.0, 9.238095238095239], [177.0, 11.913793103448281], [178.0, 11.3013698630137], [179.0, 12.739130434782606], [180.0, 13.229885057471266], [181.0, 13.697478991596636], [182.0, 12.811881188118813], [183.0, 12.582608695652171], [184.0, 15.8076923076923], [185.0, 13.640624999999998], [186.0, 12.34848484848485], [187.0, 14.360544217687071], [188.0, 15.102564102564104], [189.0, 13.200000000000001], [202.0, 113.86390532544377], [203.0, 18.88188976377952], [204.0, 30.5], [205.0, 31.16528925619834], [206.0, 12.409090909090908], [207.0, 19.4949494949495], [208.0, 21.1], [209.0, 15.492957746478874], [210.0, 16.257812500000004], [211.0, 15.560439560439558], [212.0, 20.99999999999999], [213.0, 23.070063694267503], [214.0, 17.31578947368421], [215.0, 24.94957983193277], [216.0, 35.46666666666667], [217.0, 25.42857142857143], [218.0, 33.52238805970149], [219.0, 15.401574803149606], [220.0, 36.47560975609757], [221.0, 20.16959064327485], [222.0, 30.428571428571438], [223.0, 17.634482758620692], [224.0, 17.842105263157897], [225.0, 23.171641791044774], [226.0, 17.33333333333334], [227.0, 13.410852713178288], [228.0, 14.794117647058822], [229.0, 13.929292929292927], [230.0, 20.512195121951223], [231.0, 18.819819819819816], [232.0, 13.638709677419357], [233.0, 13.791666666666668], [234.0, 14.98924731182796], [235.0, 15.304000000000004], [236.0, 15.423357664233574], [237.0, 16.613207547169818], [238.0, 16.216417910447763], [239.0, 17.9047619047619], [240.0, 19.164948453608254], [241.0, 16.76086956521739], [242.0, 22.72307692307693], [243.0, 19.529411764705884], [244.0, 15.078947368421051], [245.0, 17.963963963963966], [246.0, 18.604395604395606], [247.0, 15.101910828025478], [248.0, 13.175355450236964], [249.0, 13.36], [250.0, 15.034965034965037], [251.0, 16.45161290322581], [252.0, 15.285714285714283], [253.0, 14.572727272727274], [254.0, 15.444444444444448], [255.0, 16.065217391304344], [257.0, 10.260869565217387], [256.0, 11.888888888888891], [258.0, 6.2], [259.0, 8.180000000000001], [260.0, 7.703703703703705], [261.0, 9.84146341463415], [262.0, 8.100000000000001], [263.0, 7.976744186046515], [264.0, 13.518072289156624], [270.0, 24.081632653061227], [271.0, 119.78640776699025], [268.0, 15.34375], [269.0, 8.083333333333334], [265.0, 8.605263157894736], [266.0, 32.722222222222214], [267.0, 9.42857142857143], [273.0, 36.89855072463768], [272.0, 80.92307692307692], [274.0, 25.34928229665073], [275.0, 16.07272727272727], [276.0, 21.5], [277.0, 34.17948717948718], [278.0, 21.088000000000005], [279.0, 15.600000000000003], [280.0, 17.067307692307693], [286.0, 29.0], [287.0, 22.32085561497327], [284.0, 19.388888888888886], [285.0, 24.121359223300967], [281.0, 18.98224852071006], [282.0, 15.931428571428558], [283.0, 18.606382978723403], [289.0, 19.849315068493155], [288.0, 13.327731092436974], [290.0, 22.528571428571432], [291.0, 17.441048034934486], [292.0, 15.056910569105693], [293.0, 17.14457831325301], [294.0, 17.0], [295.0, 15.511278195488723], [296.0, 16.030674846625768], [302.0, 9.055555555555554], [303.0, 7.0], [300.0, 23.333333333333336], [301.0, 9.058823529411764], [297.0, 15.785185185185183], [298.0, 16.12962962962963], [316.0, 146.65555555555562], [305.0, 9.000000000000002], [307.0, 8.911111111111111], [308.0, 7.846153846153845], [310.0, 8.647058823529413], [311.0, 7.777777777777777], [312.0, 7.1724137931034475], [313.0, 67.74285714285716], [315.0, 116.75520833333334], [317.0, 23.76923076923076], [318.0, 20.92207792207793], [319.0, 23.68055555555555], [321.0, 21.923076923076927], [320.0, 27.982456140350873], [322.0, 27.166666666666664], [323.0, 128.6], [332.0, 22.75757575757576], [333.0, 21.061452513966465], [334.0, 12.02912621359223], [335.0, 14.950495049504955], [325.0, 38.51485148514853], [324.0, 129.0], [326.0, 15.727272727272725], [327.0, 13.896907216494835], [328.0, 13.323232323232325], [329.0, 13.860759493670889], [330.0, 12.555555555555555], [331.0, 14.06578947368421], [338.0, 33.909090909090914], [337.0, 31.044776119402986], [339.0, 29.09615384615385], [348.0, 33.2], [349.0, 40.47826086956522], [350.0, 31.073298429319376], [351.0, 17.968944099378884], [340.0, 44.4], [341.0, 42.491228070175445], [342.0, 99.01807228915663], [343.0, 26.98058252427184], [344.0, 19.311475409836074], [345.0, 24.561797752808985], [346.0, 22.541353383458656], [347.0, 23.555555555555557], [353.0, 32.94298245614035], [352.0, 15.11111111111111], [354.0, 33.648148148148145], [355.0, 77.81818181818181], [356.0, 34.87368421052633], [357.0, 22.845614035087706], [358.0, 16.363636363636363], [359.0, 31.424242424242426], [360.0, 24.005291005291006], [366.0, 18.790909090909093], [367.0, 20.688172043010745], [364.0, 31.765714285714285], [365.0, 34.91666666666665], [361.0, 22.737226277372258], [362.0, 75.0], [363.0, 30.66055045871559], [369.0, 54.04615384615385], [368.0, 21.829268292682926], [370.0, 33.38095238095238], [371.0, 42.888888888888886], [372.0, 42.04568527918782], [373.0, 42.4074074074074], [375.0, 49.882758620689664], [376.0, 34.90140845070421], [382.0, 31.249999999999982], [383.0, 22.93548387096774], [380.0, 33.57377049180329], [381.0, 31.9625], [377.0, 24.967914438502675], [378.0, 17.580952380952375], [385.0, 22.84023668639054], [384.0, 23.88513513513515], [387.0, 31.707964601769913], [396.0, 34.55729166666668], [397.0, 23.49186991869917], [398.0, 17.564102564102566], [399.0, 22.943298969072167], [388.0, 32.74698795180725], [389.0, 38.2010582010582], [390.0, 23.772486772486772], [392.0, 27.574468085106385], [393.0, 27.828125000000004], [395.0, 37.72222222222222], [408.0, 88.71428571428571], [400.0, 25.73584905660378], [409.0, 84.8961038961039], [410.0, 85.46153846153845], [411.0, 73.07920792079207], [412.0, 29.093333333333323], [413.0, 33.301587301587304], [414.0, 40.31081081081083], [415.0, 39.65540540540539], [423.0, 44.41666666666668], [419.0, 60.5483870967742], [428.0, 54.142857142857146], [429.0, 61.051282051282044], [430.0, 67.06249999999999], [431.0, 72.29687499999999], [420.0, 57.135135135135144], [421.0, 49.30964467005077], [422.0, 33.642857142857146], [424.0, 37.88636363636365], [425.0, 47.958333333333336], [426.0, 49.12307692307694], [427.0, 54.73809523809522], [433.0, 78.96666666666665], [432.0, 115.87499999999999], [434.0, 82.96874999999999], [435.0, 78.96363636363635], [436.0, 83.15384615384616], [437.0, 85.41333333333331], [438.0, 79.81818181818183], [443.0, 114.82352941176475], [446.0, 18.634146341463413], [447.0, 127.6], [444.0, 83.90384615384617], [445.0, 36.850574712643684], [455.0, 25.874999999999996], [451.0, 67.33695652173911], [449.0, 128.0], [448.0, 128.0], [460.0, 58.07894736842107], [461.0, 66.88888888888889], [462.0, 75.0], [463.0, 80.04545454545455], [452.0, 65.62698412698413], [453.0, 60.05464480874318], [454.0, 20.829268292682933], [456.0, 35.00000000000001], [457.0, 45.42857142857144], [458.0, 47.514285714285705], [459.0, 52.1764705882353], [476.0, 103.96875], [464.0, 99.06666666666665], [465.0, 127.0], [470.0, 113.28318584070796], [471.0, 224.86885245901638], [472.0, 135.13821138211375], [473.0, 92.58823529411764], [474.0, 95.82608695652175], [477.0, 52.642857142857146], [478.0, 59.666666666666664], [479.0, 67.0], [483.0, 121.125], [480.0, 73.2456140350877], [481.0, 73.13953488372094], [482.0, 82.53968253968254], [492.0, 151.5238095238096], [493.0, 140.9090909090909], [494.0, 130.554347826087], [495.0, 114.45777777777778], [487.0, 126.0], [485.0, 127.0], [484.0, 127.0], [497.0, 103.76923076923077], [496.0, 135.75], [498.0, 41.23664122137402], [499.0, 37.28235294117644], [500.0, 35.0], [501.0, 50.21052631578947], [502.0, 50.83888888888891], [503.0, 36.851851851851926], [504.0, 22.794520547945204], [511.0, 51.95312500000002], [509.0, 49.95121951219512], [508.0, 125.0], [510.0, 52.21259842519685], [505.0, 26.53125], [506.0, 30.75], [507.0, 35.225000000000016], [518.0, 43.46478873239437], [513.0, 28.478494623655916], [512.0, 46.677824267782434], [527.0, 60.4712643678161], [522.0, 25.810344827586206], [523.0, 124.0], [526.0, 57.59915611814345], [514.0, 27.072727272727274], [516.0, 46.36842105263158], [517.0, 44.821989528795804], [519.0, 42.04150943396224], [536.0, 41.545454545454575], [537.0, 32.568720379146896], [538.0, 27.72941176470589], [541.0, 52.3148148148148], [542.0, 50.69109947643978], [543.0, 46.83448275862068], [528.0, 58.924418604651166], [529.0, 60.39999999999999], [530.0, 31.716763005780372], [531.0, 31.366666666666674], [534.0, 48.178137651821864], [535.0, 42.907407407407405], [520.0, 27.17977528089888], [521.0, 26.68269230769231], [551.0, 46.07920792079207], [545.0, 38.26699029126214], [544.0, 56.95762711864406], [559.0, 31.74193548387097], [557.0, 43.55645161290324], [558.0, 33.51879699248119], [546.0, 30.51063829787235], [548.0, 103.0], [549.0, 51.91752577319589], [550.0, 47.99047619047618], [560.0, 43.50000000000003], [574.0, 53.19318181818182], [575.0, 48.05128205128204], [572.0, 40.77272727272728], [573.0, 50.0], [570.0, 41.961832061068684], [571.0, 35.4125], [568.0, 56.57575757575758], [569.0, 59.27358490566038], [561.0, 38.088541666666664], [562.0, 40.744186046511615], [564.0, 48.0], [565.0, 61.40259740259741], [566.0, 63.5625], [567.0, 55.55980861244016], [552.0, 45.43220338983051], [553.0, 44.86781609195404], [554.0, 35.182692307692314], [556.0, 45.648648648648646], [577.0, 43.15126050420171], [587.0, 30.36363636363636], [576.0, 44.86567164179104], [591.0, 43.968749999999986], [589.0, 50.228571428571435], [590.0, 47.79746835443038], [581.0, 49.06542056074766], [582.0, 51.880952380952394], [583.0, 40.668508287292816], [600.0, 30.24509803921568], [601.0, 28.976190476190474], [604.0, 51.04117647058823], [605.0, 50.590909090909086], [606.0, 54.849246231155824], [607.0, 53.63999999999997], [592.0, 48.644444444444446], [593.0, 39.947916666666636], [594.0, 33.31707317073171], [596.0, 48.723214285714256], [597.0, 49.36904761904764], [598.0, 46.46451612903227], [599.0, 41.58064516129032], [584.0, 38.87969924812029], [585.0, 36.70909090909088], [586.0, 26.96428571428571], [619.0, 42.61038961038959], [609.0, 34.61904761904761], [608.0, 43.31677018633541], [623.0, 49.64062500000001], [621.0, 55.79120879120881], [622.0, 53.13872832369939], [613.0, 60.95652173913042], [614.0, 60.626865671641795], [615.0, 61.7603305785124], [624.0, 56.27049180327868], [625.0, 50.26666666666668], [626.0, 44.04166666666666], [616.0, 52.53623188405797], [617.0, 59.39884393063585], [618.0, 39.78125000000001], [647.0, 32.80985915492957], [643.0, 158.4271844660194], [642.0, 160.79166666666663], [654.0, 68.21513944223109], [655.0, 40.40540540540542], [644.0, 151.41104294478527], [645.0, 150.81372549019605], [646.0, 125.18918918918918], [658.0, 54.05555555555555], [671.0, 55.47656249999998], [669.0, 48.85046728971964], [670.0, 55.60215053763441], [667.0, 57.051282051282065], [668.0, 53.37053571428574], [664.0, 36.900000000000006], [666.0, 55.02962962962962], [659.0, 55.34210526315789], [660.0, 47.75897435897436], [661.0, 45.658031088082886], [662.0, 47.472081218274084], [663.0, 55.111111111111114], [650.0, 61.625], [651.0, 60.18666666666666], [652.0, 60.46666666666667], [653.0, 58.151515151515135], [679.0, 69.65591397849464], [675.0, 67.75], [672.0, 42.0], [687.0, 64.18532818532817], [685.0, 68.85496183206104], [686.0, 68.75925925925925], [676.0, 69.18232044198892], [677.0, 71.45454545454544], [678.0, 70.63492063492063], [688.0, 57.33333333333333], [702.0, 52.59550561797753], [703.0, 45.9], [700.0, 53.08928571428573], [701.0, 53.19767441860466], [697.0, 58.67164179104478], [698.0, 53.33823529411763], [689.0, 58.53472222222221], [690.0, 34.564102564102576], [693.0, 54.90909090909093], [694.0, 52.75], [695.0, 50.159509202454], [680.0, 72.21568627450979], [681.0, 53.7222222222222], [682.0, 48.02380952380953], [684.0, 69.6], [710.0, 61.072916666666664], [705.0, 52.361111111111114], [704.0, 52.05527638190954], [719.0, 58.73333333333334], [717.0, 58.042105263157936], [718.0, 58.884057971014464], [714.0, 58.09890109890109], [716.0, 54.512820512820504], [706.0, 53.0], [708.0, 61.29411764705882], [709.0, 66.09876543209874], [711.0, 52.5505617977528], [728.0, 85.6021505376344], [729.0, 84.78409090909095], [730.0, 74.79365079365085], [731.0, 80.52272727272728], [732.0, 75.3859649122808], [720.0, 57.27472527472526], [721.0, 56.02857142857143], [722.0, 49.58823529411765], [723.0, 47.12765957446809], [726.0, 70.8354430379747], [712.0, 49.49206349206352], [713.0, 58.27272727272727], [741.0, 63.99159663865547], [748.0, 62.227467811158796], [736.0, 91.47191011235957], [737.0, 62.281976744186075], [740.0, 60.31779661016949], [753.0, 73.51282051282048], [766.0, 65.71428571428571], [767.0, 73.01904761904761], [764.0, 75.054054054054], [765.0, 76.75862068965515], [762.0, 83.95], [763.0, 71.44230769230766], [754.0, 65.81481481481482], [755.0, 59.05357142857142], [756.0, 61.333333333333336], [757.0, 69.03053435114504], [758.0, 67.55704697986579], [759.0, 64.65116279069767], [745.0, 73.24867724867727], [746.0, 68.86991869918695], [747.0, 62.4805194805195], [749.0, 58.78358208955223], [750.0, 57.75000000000001], [775.0, 64.62727272727273], [771.0, 91.25000000000003], [768.0, 66.03896103896103], [782.0, 74.56896551724137], [772.0, 68.41605839416059], [773.0, 64.50387596899226], [774.0, 64.67391304347827], [784.0, 85.78048780487804], [796.0, 65.32967032967034], [799.0, 89.09523809523807], [794.0, 58.09929078014185], [795.0, 59.63736263736263], [792.0, 55.757225433526], [793.0, 36.0], [785.0, 75.00000000000001], [786.0, 74.96028880866423], [787.0, 75.65822784810128], [788.0, 75.20833333333333], [790.0, 93.20967741935483], [791.0, 75.63135593220339], [776.0, 68.37185929648244], [777.0, 61.989583333333336], [778.0, 68.26666666666667], [781.0, 86.28758169934643], [806.0, 77.40229885057471], [801.0, 76.0245901639344], [800.0, 82.08421052631579], [813.0, 52.77058823529413], [814.0, 68.8], [811.0, 66.20370370370372], [812.0, 57.27981651376147], [803.0, 89.55000000000001], [804.0, 86.90816326530614], [805.0, 84.30476190476186], [807.0, 76.75999999999998], [824.0, 85.54761904761904], [825.0, 58.06310679611651], [826.0, 58.76521739130434], [827.0, 55.0], [828.0, 56.786026200873344], [829.0, 68.67605633802816], [817.0, 82.54545454545455], [818.0, 62.816793893129734], [819.0, 59.02777777777778], [820.0, 67.71969696969698], [821.0, 59.12500000000002], [822.0, 63.740458015267194], [823.0, 72.76363636363632], [809.0, 102.97872340425535], [810.0, 83.5063694267516], [838.0, 70.0], [834.0, 67.62325581395342], [833.0, 85.62385321100918], [845.0, 67.09411764705882], [846.0, 58.10526315789474], [835.0, 68.36046511627909], [836.0, 66.90476190476193], [837.0, 70.0731707317073], [848.0, 82.94054054054055], [858.0, 70.68987341772156], [859.0, 79.0], [862.0, 79.0], [861.0, 79.0], [863.0, 111.54237288135592], [856.0, 92.0], [857.0, 77.06741573033712], [849.0, 91.51351351351353], [852.0, 112.99999999999999], [853.0, 117.35638297872339], [854.0, 91.02339181286553], [855.0, 91.12500000000004], [841.0, 77.2238805970149], [842.0, 65.59375], [843.0, 71.89000000000003], [844.0, 74.33043478260868], [867.0, 94.41304347826086], [864.0, 119.17307692307693], [879.0, 78.02083333333334], [877.0, 93.65322580645159], [878.0, 80.73770491803278], [865.0, 92.82165605095543], [866.0, 88.82352941176471], [868.0, 77.41935483870967], [869.0, 96.37254901960785], [870.0, 102.21768707482993], [871.0, 94.87341772151896], [880.0, 90.60606060606058], [895.0, 119.63636363636363], [891.0, 115.78417266187049], [892.0, 99.90540540540536], [889.0, 143.5646258503402], [890.0, 137.87323943661968], [881.0, 81.8943661971831], [882.0, 97.3953488372093], [875.0, 126.90624999999999], [874.0, 79.0], [872.0, 78.0], [876.0, 108.91914893617025], [903.0, 96.15], [907.0, 79.13131313131315], [896.0, 116.23976608187134], [898.0, 78.0], [897.0, 79.0], [900.0, 78.0], [899.0, 78.0], [901.0, 147.75722543352603], [902.0, 99.06951871657752], [912.0, 87.94964028776977], [926.0, 84.27083333333336], [927.0, 78.0], [924.0, 87.3012820512821], [925.0, 81.17647058823529], [922.0, 83.520325203252], [923.0, 80.64423076923079], [920.0, 99.21428571428571], [921.0, 111.39442231075694], [913.0, 73.66470588235296], [914.0, 79.05], [915.0, 75.04615384615386], [916.0, 68.37499999999999], [917.0, 79.0], [919.0, 95.71428571428571], [918.0, 79.0], [904.0, 91.7685185185185], [905.0, 91.12865497076025], [906.0, 89.96874999999999], [910.0, 114.41463414634144], [909.0, 79.0], [911.0, 120.03030303030302], [931.0, 67.58620689655177], [928.0, 107.07407407407408], [943.0, 90.69642857142861], [939.0, 77.05232558139537], [941.0, 82.10483870967744], [929.0, 91.07870370370374], [930.0, 68.58415841584156], [932.0, 69.64912280701755], [933.0, 70.52941176470588], [934.0, 75.33155080213903], [935.0, 68.26666666666667], [944.0, 77.32], [959.0, 86.39705882352936], [957.0, 109.94029850746269], [958.0, 115.18124999999999], [952.0, 80.82517482517483], [953.0, 72.09482758620689], [948.0, 110.15873015873017], [949.0, 106.02745098039222], [950.0, 85.78743961352663], [951.0, 51.99999999999999], [937.0, 99.09090909090911], [938.0, 100.34730538922153], [961.0, 86.39240506329118], [971.0, 114.44927536231886], [960.0, 80.75362318840584], [975.0, 101.0], [972.0, 81.32231404958677], [974.0, 104.98739495798317], [962.0, 80.74698795180726], [963.0, 82.94230769230766], [964.0, 73.42105263157895], [966.0, 146.0], [984.0, 94.45945945945945], [985.0, 84.64999999999996], [986.0, 86.93333333333332], [989.0, 107.60869565217392], [987.0, 76.8], [990.0, 118.7242524916943], [991.0, 84.18994413407823], [977.0, 144.0], [978.0, 133.33333333333331], [979.0, 133.20866141732284], [980.0, 86.36842105263158], [981.0, 85.71755725190836], [982.0, 79.09649122807016], [983.0, 86.94285714285714], [968.0, 121.7323943661972], [969.0, 122.0], [970.0, 136.24074074074076], [999.0, 96.07692307692311], [993.0, 86.52558139534885], [992.0, 90.51162790697676], [1006.0, 112.18918918918922], [1005.0, 78.00000000000001], [1004.0, 77.0], [1007.0, 107.02051282051282], [994.0, 73.39062499999999], [995.0, 78.0], [997.0, 108.24137931034484], [998.0, 104.11570247933885], [1008.0, 80.5217391304348], [1022.0, 89.56435643564355], [1023.0, 82.0], [1020.0, 97.15083798882677], [1021.0, 102.30841121495327], [1018.0, 127.03361344537817], [1019.0, 98.66666666666666], [1016.0, 114.01470588235296], [1017.0, 120.75471698113209], [1009.0, 72.99242424242425], [1010.0, 75.65972222222214], [1011.0, 81.28571428571432], [1012.0, 87.63000000000002], [1013.0, 78.0], [1015.0, 79.0], [1014.0, 79.8], [1000.0, 73.94202898550728], [1001.0, 78.98224852071007], [1002.0, 79.13636363636361], [1003.0, 68.05263157894738], [1032.0, 94.45535714285712], [1046.0, 107.275], [1024.0, 107.9], [1026.0, 114.5], [1028.0, 136.39583333333334], [1030.0, 93.99090909090913], [1058.0, 113.81168831168831], [1086.0, 134.5], [1056.0, 133.25], [1082.0, 92.75], [1084.0, 97.25892857142851], [1078.0, 130.82291666666666], [1080.0, 111.78947368421052], [1072.0, 97.85000000000004], [1038.0, 121.0], [1036.0, 120.5], [1034.0, 121.25], [1074.0, 89.97391304347823], [1060.0, 86.93939393939397], [1062.0, 85.89285714285714], [1066.0, 137.57142857142856], [1064.0, 136.0], [1068.0, 119.46428571428572], [1070.0, 132.71428571428575], [1040.0, 144.6796116504854], [1042.0, 114.76653696498052], [1044.0, 114.5], [1050.0, 135.72549019607843], [1048.0, 123.27272727272728], [1052.0, 133.5], [1054.0, 85.98695652173913], [1100.0, 120.61979166666671], [1112.0, 84.6168831168831], [1092.0, 106.77777777777779], [1090.0, 142.03643724696352], [1088.0, 135.0], [1114.0, 91.6923076923077], [1116.0, 131.5], [1118.0, 111.87443946188341], [1094.0, 102.9705882352941], [1098.0, 133.0], [1096.0, 133.5], [1102.0, 77.58715596330278], [1136.0, 119.05791505791508], [1140.0, 87.3970588235294], [1138.0, 133.0], [1142.0, 84.6060606060606], [1146.0, 128.54799999999994], [1144.0, 133.0], [1148.0, 108.76865671641791], [1150.0, 92.07633587786259], [1120.0, 86.00000000000006], [1122.0, 92.71875000000001], [1124.0, 134.0], [1126.0, 122.6153846153846], [1128.0, 86.53086419753086], [1130.0, 91.30952380952381], [1132.0, 101.61111111111111], [1134.0, 134.0], [1104.0, 80.27906976744187], [1106.0, 132.0], [1108.0, 126.2361111111111], [1110.0, 118.32333333333337], [1178.0, 95.75129533678758], [1156.0, 119.59825327510916], [1152.0, 122.33333333333333], [1180.0, 88.55384615384612], [1158.0, 83.82178217821779], [1160.0, 95.59663865546221], [1166.0, 133.30593607305946], [1164.0, 102.0], [1162.0, 101.0], [1200.0, 124.25569872166001], [1188.0, 100.4], [1186.0, 101.16363636363633], [1184.0, 102.0], [1190.0, 154.46212121212116], [1192.0, 134.15656565656562], [1194.0, 124.94186046511632], [1198.0, 152.85000000000002], [1196.0, 100.0], [1168.0, 95.97402597402599], [1170.0, 96.12820512820512], [1176.0, 137.476534296029], [1174.0, 103.07142857142857], [1172.0, 101.33333333333333], [1039.0, 146.2467532467532], [1049.0, 133.9886363636364], [1029.0, 127.25541125541123], [1055.0, 134.0], [1025.0, 147.0], [1027.0, 82.0], [1031.0, 107.92647058823525], [1033.0, 92.78894472361807], [1037.0, 121.0], [1035.0, 121.0], [1059.0, 114.41052631578948], [1057.0, 133.0], [1083.0, 91.04901960784312], [1085.0, 77.21739130434784], [1079.0, 128.51492537313433], [1081.0, 93.79661016949152], [1073.0, 89.11818181818185], [1075.0, 136.0], [1077.0, 132.85714285714283], [1061.0, 85.8700564971752], [1063.0, 78.36], [1067.0, 135.16666666666666], [1065.0, 136.0], [1069.0, 117.1010101010101], [1071.0, 89.79816513761465], [1041.0, 140.08411214953273], [1043.0, 110.87387387387386], [1045.0, 106.60606060606064], [1047.0, 122.0], [1051.0, 96.38562091503263], [1053.0, 92.57943925233646], [1101.0, 83.29999999999998], [1091.0, 112.66187050359719], [1089.0, 146.54545454545456], [1117.0, 116.47428571428576], [1115.0, 131.5], [1119.0, 90.04081632653063], [1111.0, 74.60000000000001], [1113.0, 82.97260273972599], [1093.0, 102.31249999999999], [1095.0, 109.0], [1099.0, 135.4565217391305], [1097.0, 133.0], [1103.0, 84.4491525423729], [1137.0, 86.67032967032969], [1141.0, 103.7131782945736], [1145.0, 133.0], [1143.0, 133.0], [1147.0, 127.99159663865547], [1151.0, 115.04848484848482], [1121.0, 88.08333333333329], [1127.0, 120.40344827586203], [1125.0, 134.0], [1129.0, 89.07526881720432], [1131.0, 95.60897435897436], [1135.0, 122.26865671641791], [1105.0, 83.47115384615384], [1107.0, 132.0], [1109.0, 130.75510204081635], [1179.0, 85.91216216216215], [1157.0, 108.17560975609754], [1155.0, 125.75862068965513], [1181.0, 107.75294117647061], [1183.0, 102.39999999999999], [1159.0, 85.23611111111114], [1161.0, 101.0], [1167.0, 113.74009900990093], [1165.0, 80.69230769230771], [1163.0, 101.15789473684208], [1187.0, 101.0], [1185.0, 102.27272727272727], [1189.0, 171.4972067039107], [1191.0, 162.81818181818184], [1193.0, 131.79393939393944], [1199.0, 167.22580645161287], [1197.0, 113.62264150943393], [1195.0, 100.0], [1169.0, 98.63636363636368], [1173.0, 103.0], [1171.0, 91.28571428571429], [1175.0, 125.125], [1177.0, 129.87837837837833]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1009.0915417467849, 103.20456347518441]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 98803.88333333333, "minX": 1.71924162E12, "maxY": 564385.2, "series": [{"data": [[1.71924162E12, 523189.2], [1.71924168E12, 98803.88333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71924162E12, 564385.2], [1.71924168E12, 106583.71666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71924168E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 96.1798920607188, "minX": 1.71924162E12, "maxY": 140.40180809357554, "series": [{"data": [[1.71924162E12, 96.1798920607188], [1.71924168E12, 140.40180809357554]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71924168E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 96.17793798750397, "minX": 1.71924162E12, "maxY": 140.40013710662004, "series": [{"data": [[1.71924162E12, 96.17793798750397], [1.71924168E12, 140.40013710662004]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71924168E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.71924162E12, "maxY": 0.14370327216234888, "series": [{"data": [[1.71924162E12, 0.14370327216234888], [1.71924168E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71924168E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.7976931348623157E308, "minX": 1.7976931348623157E308, "maxY": 4.9E-324, "series": [{"data": [], "isOverall": false, "label": "Max", "isController": false}, {"data": [], "isOverall": false, "label": "Min", "isController": false}, {"data": [], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "Median", "isController": false}, {"data": [], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 4.9E-324, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 9.0, "minX": 3116.0, "maxY": 235.0, "series": [{"data": [[8998.0, 124.0], [9071.0, 128.0], [9625.0, 32.0], [9528.0, 91.0], [9524.0, 102.0], [9231.0, 126.0], [9276.0, 122.0], [9686.0, 120.0], [9698.0, 113.0], [10083.0, 12.0], [10185.0, 122.0], [9896.0, 122.0], [9771.0, 124.0], [9895.0, 123.0], [10396.0, 46.0], [10316.0, 113.0], [10368.0, 118.0], [10270.0, 118.0], [10320.0, 117.0], [10703.0, 114.0], [10618.0, 116.0], [11024.0, 55.0], [11108.0, 68.0], [10790.0, 115.0], [10942.0, 116.0], [11782.0, 16.0], [3116.0, 9.0], [4497.0, 125.0], [4882.0, 235.0], [7936.0, 127.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 11782.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 9.0, "minX": 3116.0, "maxY": 235.0, "series": [{"data": [[8998.0, 124.0], [9071.0, 128.0], [9625.0, 32.0], [9528.0, 91.0], [9524.0, 102.0], [9231.0, 126.0], [9276.0, 122.0], [9686.0, 120.0], [9698.0, 113.0], [10083.0, 12.0], [10185.0, 122.0], [9896.0, 122.0], [9771.0, 124.0], [9895.0, 123.0], [10396.0, 46.0], [10316.0, 113.0], [10368.0, 118.0], [10270.0, 118.0], [10320.0, 117.0], [10703.0, 114.0], [10618.0, 116.0], [11024.0, 55.0], [11108.0, 68.0], [10790.0, 115.0], [10942.0, 116.0], [11782.0, 16.0], [3116.0, 9.0], [4497.0, 125.0], [4882.0, 235.0], [7936.0, 127.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 11782.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 757.9833333333333, "minX": 1.71924162E12, "maxY": 4139.6, "series": [{"data": [[1.71924162E12, 4139.6], [1.71924168E12, 757.9833333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71924168E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 777.9833333333333, "minX": 1.71924162E12, "maxY": 4119.6, "series": [{"data": [[1.71924162E12, 4119.6], [1.71924168E12, 777.9833333333333]], "isOverall": false, "label": "404", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71924168E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 777.9833333333333, "minX": 1.71924162E12, "maxY": 4119.6, "series": [{"data": [[1.71924162E12, 4119.6], [1.71924168E12, 777.9833333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71924168E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 777.9833333333333, "minX": 1.71924162E12, "maxY": 4119.6, "series": [{"data": [], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71924162E12, 4119.6], [1.71924168E12, 777.9833333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71924168E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

